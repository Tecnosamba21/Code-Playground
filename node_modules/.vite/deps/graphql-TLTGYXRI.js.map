{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/graphql/graphql.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n\r\n// src/basic-languages/graphql/graphql.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"#\"\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"\"\"', close: '\"\"\"', notIn: [\"string\", \"comment\"] },\r\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"\"\"', close: '\"\"\"' },\r\n    { open: '\"', close: '\"' }\r\n  ],\r\n  folding: {\r\n    offSide: true\r\n  }\r\n};\r\nvar language = {\r\n  // Set defaultToken to invalid to see what you do not tokenize yet\r\n  defaultToken: \"invalid\",\r\n  tokenPostfix: \".gql\",\r\n  keywords: [\r\n    \"null\",\r\n    \"true\",\r\n    \"false\",\r\n    \"query\",\r\n    \"mutation\",\r\n    \"subscription\",\r\n    \"extend\",\r\n    \"schema\",\r\n    \"directive\",\r\n    \"scalar\",\r\n    \"type\",\r\n    \"interface\",\r\n    \"union\",\r\n    \"enum\",\r\n    \"input\",\r\n    \"implements\",\r\n    \"fragment\",\r\n    \"on\"\r\n  ],\r\n  typeKeywords: [\"Int\", \"Float\", \"String\", \"Boolean\", \"ID\"],\r\n  directiveLocations: [\r\n    \"SCHEMA\",\r\n    \"SCALAR\",\r\n    \"OBJECT\",\r\n    \"FIELD_DEFINITION\",\r\n    \"ARGUMENT_DEFINITION\",\r\n    \"INTERFACE\",\r\n    \"UNION\",\r\n    \"ENUM\",\r\n    \"ENUM_VALUE\",\r\n    \"INPUT_OBJECT\",\r\n    \"INPUT_FIELD_DEFINITION\",\r\n    \"QUERY\",\r\n    \"MUTATION\",\r\n    \"SUBSCRIPTION\",\r\n    \"FIELD\",\r\n    \"FRAGMENT_DEFINITION\",\r\n    \"FRAGMENT_SPREAD\",\r\n    \"INLINE_FRAGMENT\",\r\n    \"VARIABLE_DEFINITION\"\r\n  ],\r\n  operators: [\"=\", \"!\", \"?\", \":\", \"&\", \"|\"],\r\n  // we include these common regular expressions\r\n  symbols: /[=!?:&|]+/,\r\n  // https://facebook.github.io/graphql/draft/#sec-String-Value\r\n  escapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\r\n  // The main tokenizer for our languages\r\n  tokenizer: {\r\n    root: [\r\n      // fields and argument names\r\n      [\r\n        /[a-z_][\\w$]*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": \"keyword\",\r\n            \"@default\": \"key.identifier\"\r\n          }\r\n        }\r\n      ],\r\n      // identify typed input variables\r\n      [\r\n        /[$][\\w$]*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": \"keyword\",\r\n            \"@default\": \"argument.identifier\"\r\n          }\r\n        }\r\n      ],\r\n      // to show class names nicely\r\n      [\r\n        /[A-Z][\\w\\$]*/,\r\n        {\r\n          cases: {\r\n            \"@typeKeywords\": \"keyword\",\r\n            \"@default\": \"type.identifier\"\r\n          }\r\n        }\r\n      ],\r\n      // whitespace\r\n      { include: \"@whitespace\" },\r\n      // delimiters and operators\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [/@symbols/, { cases: { \"@operators\": \"operator\", \"@default\": \"\" } }],\r\n      // @ annotations.\r\n      // As an example, we emit a debugging log message on these tokens.\r\n      // Note: message are supressed during the first load -- change some lines to see them.\r\n      [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, { token: \"annotation\", log: \"annotation token: $0\" }],\r\n      // numbers\r\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\r\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\r\n      [/\\d+/, \"number\"],\r\n      // delimiter: after number because of .\\d floats\r\n      [/[;,.]/, \"delimiter\"],\r\n      [/\"\"\"/, { token: \"string\", next: \"@mlstring\", nextEmbedded: \"markdown\" }],\r\n      // strings\r\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\r\n      // non-teminated string\r\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }]\r\n    ],\r\n    mlstring: [\r\n      [/[^\"]+/, \"string\"],\r\n      ['\"\"\"', { token: \"string\", next: \"@pop\", nextEmbedded: \"@pop\" }]\r\n    ],\r\n    string: [\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"\"],\r\n      [/#.*$/, \"comment\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
