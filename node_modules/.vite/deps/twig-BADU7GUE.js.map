{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/twig/twig.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n\r\n// src/basic-languages/twig/twig.ts\r\nvar conf = {\r\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\r\n  comments: {\r\n    blockComment: [\"{#\", \"#}\"]\r\n  },\r\n  brackets: [\r\n    [\"{#\", \"#}\"],\r\n    [\"{%\", \"%}\"],\r\n    [\"{{\", \"}}\"],\r\n    [\"(\", \")\"],\r\n    [\"[\", \"]\"],\r\n    // HTML\r\n    [\"<!--\", \"-->\"],\r\n    [\"<\", \">\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{# \", close: \" #}\" },\r\n    { open: \"{% \", close: \" %}\" },\r\n    { open: \"{{ \", close: \" }}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" },\r\n    // HTML\r\n    { open: \"<\", close: \">\" }\r\n  ]\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \"\",\r\n  ignoreCase: true,\r\n  keywords: [\r\n    // (opening) tags\r\n    \"apply\",\r\n    \"autoescape\",\r\n    \"block\",\r\n    \"deprecated\",\r\n    \"do\",\r\n    \"embed\",\r\n    \"extends\",\r\n    \"flush\",\r\n    \"for\",\r\n    \"from\",\r\n    \"if\",\r\n    \"import\",\r\n    \"include\",\r\n    \"macro\",\r\n    \"sandbox\",\r\n    \"set\",\r\n    \"use\",\r\n    \"verbatim\",\r\n    \"with\",\r\n    // closing tags\r\n    \"endapply\",\r\n    \"endautoescape\",\r\n    \"endblock\",\r\n    \"endembed\",\r\n    \"endfor\",\r\n    \"endif\",\r\n    \"endmacro\",\r\n    \"endsandbox\",\r\n    \"endset\",\r\n    \"endwith\",\r\n    // literals\r\n    \"true\",\r\n    \"false\"\r\n  ],\r\n  tokenizer: {\r\n    root: [\r\n      // whitespace\r\n      [/\\s+/],\r\n      // Twig Tag Delimiters\r\n      [/{#/, \"comment.twig\", \"@commentState\"],\r\n      [/{%[-~]?/, \"delimiter.twig\", \"@blockState\"],\r\n      [/{{[-~]?/, \"delimiter.twig\", \"@variableState\"],\r\n      // HTML\r\n      [/<!DOCTYPE/, \"metatag.html\", \"@doctype\"],\r\n      [/<!--/, \"comment.html\", \"@comment\"],\r\n      [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/, [\"delimiter.html\", \"tag.html\", \"\", \"delimiter.html\"]],\r\n      [/(<)(script)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@script\" }]],\r\n      [/(<)(style)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@style\" }]],\r\n      [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@otherTag\" }]],\r\n      [/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@otherTag\" }]],\r\n      [/</, \"delimiter.html\"],\r\n      [/[^<{]+/]\r\n      // text\r\n    ],\r\n    /**\r\n     * Comment Tag Handling\r\n     */\r\n    commentState: [\r\n      [/#}/, \"comment.twig\", \"@pop\"],\r\n      [/./, \"comment.twig\"]\r\n    ],\r\n    /**\r\n     * Block Tag Handling\r\n     */\r\n    blockState: [\r\n      [/[-~]?%}/, \"delimiter.twig\", \"@pop\"],\r\n      // whitespace\r\n      [/\\s+/],\r\n      // verbatim\r\n      // Unlike other blocks, verbatim ehas its own state\r\n      // transition to ensure we mark its contents as strings.\r\n      [\r\n        /(verbatim)(\\s*)([-~]?%})/,\r\n        [\"keyword.twig\", \"\", { token: \"delimiter.twig\", next: \"@rawDataState\" }]\r\n      ],\r\n      { include: \"expression\" }\r\n    ],\r\n    rawDataState: [\r\n      // endverbatim\r\n      [\r\n        /({%[-~]?)(\\s*)(endverbatim)(\\s*)([-~]?%})/,\r\n        [\"delimiter.twig\", \"\", \"keyword.twig\", \"\", { token: \"delimiter.twig\", next: \"@popall\" }]\r\n      ],\r\n      [/./, \"string.twig\"]\r\n    ],\r\n    /**\r\n     * Variable Tag Handling\r\n     */\r\n    variableState: [[/[-~]?}}/, \"delimiter.twig\", \"@pop\"], { include: \"expression\" }],\r\n    stringState: [\r\n      // closing double quoted string\r\n      [/\"/, \"string.twig\", \"@pop\"],\r\n      // interpolation start\r\n      [/#{\\s*/, \"string.twig\", \"@interpolationState\"],\r\n      // string part\r\n      [/[^#\"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#\"\\\\]*)*/, \"string.twig\"]\r\n    ],\r\n    interpolationState: [\r\n      // interpolation end\r\n      [/}/, \"string.twig\", \"@pop\"],\r\n      { include: \"expression\" }\r\n    ],\r\n    /**\r\n     * Expression Handling\r\n     */\r\n    expression: [\r\n      // whitespace\r\n      [/\\s+/],\r\n      // operators - math\r\n      [/\\+|-|\\/{1,2}|%|\\*{1,2}/, \"operators.twig\"],\r\n      // operators - logic\r\n      [/(and|or|not|b-and|b-xor|b-or)(\\s+)/, [\"operators.twig\", \"\"]],\r\n      // operators - comparison (symbols)\r\n      [/==|!=|<|>|>=|<=/, \"operators.twig\"],\r\n      // operators - comparison (words)\r\n      [/(starts with|ends with|matches)(\\s+)/, [\"operators.twig\", \"\"]],\r\n      // operators - containment\r\n      [/(in)(\\s+)/, [\"operators.twig\", \"\"]],\r\n      // operators - test\r\n      [/(is)(\\s+)/, [\"operators.twig\", \"\"]],\r\n      // operators - misc\r\n      [/\\||~|:|\\.{1,2}|\\?{1,2}/, \"operators.twig\"],\r\n      // names\r\n      [\r\n        /[^\\W\\d][\\w]*/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": \"keyword.twig\",\r\n            \"@default\": \"variable.twig\"\r\n          }\r\n        }\r\n      ],\r\n      // numbers\r\n      [/\\d+(\\.\\d+)?/, \"number.twig\"],\r\n      // punctuation\r\n      [/\\(|\\)|\\[|\\]|{|}|,/, \"delimiter.twig\"],\r\n      // strings\r\n      [/\"([^#\"\\\\]*(?:\\\\.[^#\"\\\\]*)*)\"|\\'([^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\'/, \"string.twig\"],\r\n      // opening double quoted string\r\n      [/\"/, \"string.twig\", \"@stringState\"],\r\n      // misc syntactic constructs\r\n      // These are not operators per se, but for the purposes of lexical analysis we\r\n      // can treat them as such.\r\n      // arrow functions\r\n      [/=>/, \"operators.twig\"],\r\n      // assignment\r\n      [/=/, \"operators.twig\"]\r\n    ],\r\n    /**\r\n     * HTML\r\n     */\r\n    doctype: [\r\n      [/[^>]+/, \"metatag.content.html\"],\r\n      [/>/, \"metatag.html\", \"@pop\"]\r\n    ],\r\n    comment: [\r\n      [/-->/, \"comment.html\", \"@pop\"],\r\n      [/[^-]+/, \"comment.content.html\"],\r\n      [/./, \"comment.content.html\"]\r\n    ],\r\n    otherTag: [\r\n      [/\\/?>/, \"delimiter.html\", \"@pop\"],\r\n      [/\"([^\"]*)\"/, \"attribute.value.html\"],\r\n      [/'([^']*)'/, \"attribute.value.html\"],\r\n      [/[\\w\\-]+/, \"attribute.name.html\"],\r\n      [/=/, \"delimiter.html\"],\r\n      [/[ \\t\\r\\n]+/]\r\n      // whitespace\r\n    ],\r\n    // -- BEGIN <script> tags handling\r\n    // After <script\r\n    script: [\r\n      [/type/, \"attribute.name.html\", \"@scriptAfterType\"],\r\n      [/\"([^\"]*)\"/, \"attribute.value.html\"],\r\n      [/'([^']*)'/, \"attribute.value.html\"],\r\n      [/[\\w\\-]+/, \"attribute.name.html\"],\r\n      [/=/, \"delimiter.html\"],\r\n      [\r\n        />/,\r\n        {\r\n          token: \"delimiter.html\",\r\n          next: \"@scriptEmbedded\",\r\n          nextEmbedded: \"text/javascript\"\r\n        }\r\n      ],\r\n      [/[ \\t\\r\\n]+/],\r\n      // whitespace\r\n      [\r\n        /(<\\/)(script\\s*)(>)/,\r\n        [\"delimiter.html\", \"tag.html\", { token: \"delimiter.html\", next: \"@pop\" }]\r\n      ]\r\n    ],\r\n    // After <script ... type\r\n    scriptAfterType: [\r\n      [/=/, \"delimiter.html\", \"@scriptAfterTypeEquals\"],\r\n      [\r\n        />/,\r\n        {\r\n          token: \"delimiter.html\",\r\n          next: \"@scriptEmbedded\",\r\n          nextEmbedded: \"text/javascript\"\r\n        }\r\n      ],\r\n      // cover invalid e.g. <script type>\r\n      [/[ \\t\\r\\n]+/],\r\n      // whitespace\r\n      [/<\\/script\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\r\n    ],\r\n    // After <script ... type =\r\n    scriptAfterTypeEquals: [\r\n      [\r\n        /\"([^\"]*)\"/,\r\n        {\r\n          token: \"attribute.value.html\",\r\n          switchTo: \"@scriptWithCustomType.$1\"\r\n        }\r\n      ],\r\n      [\r\n        /'([^']*)'/,\r\n        {\r\n          token: \"attribute.value.html\",\r\n          switchTo: \"@scriptWithCustomType.$1\"\r\n        }\r\n      ],\r\n      [\r\n        />/,\r\n        {\r\n          token: \"delimiter.html\",\r\n          next: \"@scriptEmbedded\",\r\n          nextEmbedded: \"text/javascript\"\r\n        }\r\n      ],\r\n      // cover invalid e.g. <script type=>\r\n      [/[ \\t\\r\\n]+/],\r\n      // whitespace\r\n      [/<\\/script\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\r\n    ],\r\n    // After <script ... type = $S2\r\n    scriptWithCustomType: [\r\n      [\r\n        />/,\r\n        {\r\n          token: \"delimiter.html\",\r\n          next: \"@scriptEmbedded.$S2\",\r\n          nextEmbedded: \"$S2\"\r\n        }\r\n      ],\r\n      [/\"([^\"]*)\"/, \"attribute.value.html\"],\r\n      [/'([^']*)'/, \"attribute.value.html\"],\r\n      [/[\\w\\-]+/, \"attribute.name.html\"],\r\n      [/=/, \"delimiter.html\"],\r\n      [/[ \\t\\r\\n]+/],\r\n      // whitespace\r\n      [/<\\/script\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\r\n    ],\r\n    scriptEmbedded: [\r\n      [/<\\/script/, { token: \"@rematch\", next: \"@pop\", nextEmbedded: \"@pop\" }],\r\n      [/[^<]+/, \"\"]\r\n    ],\r\n    // -- END <script> tags handling\r\n    // -- BEGIN <style> tags handling\r\n    // After <style\r\n    style: [\r\n      [/type/, \"attribute.name.html\", \"@styleAfterType\"],\r\n      [/\"([^\"]*)\"/, \"attribute.value.html\"],\r\n      [/'([^']*)'/, \"attribute.value.html\"],\r\n      [/[\\w\\-]+/, \"attribute.name.html\"],\r\n      [/=/, \"delimiter.html\"],\r\n      [\r\n        />/,\r\n        {\r\n          token: \"delimiter.html\",\r\n          next: \"@styleEmbedded\",\r\n          nextEmbedded: \"text/css\"\r\n        }\r\n      ],\r\n      [/[ \\t\\r\\n]+/],\r\n      // whitespace\r\n      [\r\n        /(<\\/)(style\\s*)(>)/,\r\n        [\"delimiter.html\", \"tag.html\", { token: \"delimiter.html\", next: \"@pop\" }]\r\n      ]\r\n    ],\r\n    // After <style ... type\r\n    styleAfterType: [\r\n      [/=/, \"delimiter.html\", \"@styleAfterTypeEquals\"],\r\n      [\r\n        />/,\r\n        {\r\n          token: \"delimiter.html\",\r\n          next: \"@styleEmbedded\",\r\n          nextEmbedded: \"text/css\"\r\n        }\r\n      ],\r\n      // cover invalid e.g. <style type>\r\n      [/[ \\t\\r\\n]+/],\r\n      // whitespace\r\n      [/<\\/style\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\r\n    ],\r\n    // After <style ... type =\r\n    styleAfterTypeEquals: [\r\n      [\r\n        /\"([^\"]*)\"/,\r\n        {\r\n          token: \"attribute.value.html\",\r\n          switchTo: \"@styleWithCustomType.$1\"\r\n        }\r\n      ],\r\n      [\r\n        /'([^']*)'/,\r\n        {\r\n          token: \"attribute.value.html\",\r\n          switchTo: \"@styleWithCustomType.$1\"\r\n        }\r\n      ],\r\n      [\r\n        />/,\r\n        {\r\n          token: \"delimiter.html\",\r\n          next: \"@styleEmbedded\",\r\n          nextEmbedded: \"text/css\"\r\n        }\r\n      ],\r\n      // cover invalid e.g. <style type=>\r\n      [/[ \\t\\r\\n]+/],\r\n      // whitespace\r\n      [/<\\/style\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\r\n    ],\r\n    // After <style ... type = $S2\r\n    styleWithCustomType: [\r\n      [\r\n        />/,\r\n        {\r\n          token: \"delimiter.html\",\r\n          next: \"@styleEmbedded.$S2\",\r\n          nextEmbedded: \"$S2\"\r\n        }\r\n      ],\r\n      [/\"([^\"]*)\"/, \"attribute.value.html\"],\r\n      [/'([^']*)'/, \"attribute.value.html\"],\r\n      [/[\\w\\-]+/, \"attribute.name.html\"],\r\n      [/=/, \"delimiter.html\"],\r\n      [/[ \\t\\r\\n]+/],\r\n      // whitespace\r\n      [/<\\/style\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\r\n    ],\r\n    styleEmbedded: [\r\n      [/<\\/style/, { token: \"@rematch\", next: \"@pop\", nextEmbedded: \"@pop\" }],\r\n      [/[^<]+/, \"\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
