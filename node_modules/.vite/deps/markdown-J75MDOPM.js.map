{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/markdown/markdown.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n\r\n// src/basic-languages/markdown/markdown.ts\r\nvar conf = {\r\n  comments: {\r\n    blockComment: [\"<!--\", \"-->\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"<\", close: \">\", notIn: [\"string\"] }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"(\", close: \")\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"`\", close: \"`\" }\r\n  ],\r\n  folding: {\r\n    markers: {\r\n      start: new RegExp(\"^\\\\s*<!--\\\\s*#?region\\\\b.*-->\"),\r\n      end: new RegExp(\"^\\\\s*<!--\\\\s*#?endregion\\\\b.*-->\")\r\n    }\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".md\",\r\n  // escape codes\r\n  control: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n  noncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n  escapes: /\\\\(?:@control)/,\r\n  // escape codes for javascript/CSS strings\r\n  jsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\r\n  // non matched elements\r\n  empty: [\r\n    \"area\",\r\n    \"base\",\r\n    \"basefont\",\r\n    \"br\",\r\n    \"col\",\r\n    \"frame\",\r\n    \"hr\",\r\n    \"img\",\r\n    \"input\",\r\n    \"isindex\",\r\n    \"link\",\r\n    \"meta\",\r\n    \"param\"\r\n  ],\r\n  tokenizer: {\r\n    root: [\r\n      // markdown tables\r\n      [/^\\s*\\|/, \"@rematch\", \"@table_header\"],\r\n      // headers (with #)\r\n      [/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, [\"white\", \"keyword\", \"keyword\", \"keyword\"]],\r\n      // headers (with =)\r\n      [/^\\s*(=+|\\-+)\\s*$/, \"keyword\"],\r\n      // headers (with ***)\r\n      [/^\\s*((\\*[ ]?)+)\\s*$/, \"meta.separator\"],\r\n      // quote\r\n      [/^\\s*>+/, \"comment\"],\r\n      // list (starting with * or number)\r\n      [/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, \"keyword\"],\r\n      // code block (4 spaces indent)\r\n      [/^(\\t|[ ]{4})[^ ].*$/, \"string\"],\r\n      // code block (3 tilde)\r\n      [/^\\s*~~~\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: \"string\", next: \"@codeblock\" }],\r\n      // github style code blocks (with backticks and language)\r\n      [\r\n        /^\\s*```\\s*((?:\\w|[\\/\\-#])+).*$/,\r\n        { token: \"string\", next: \"@codeblockgh\", nextEmbedded: \"$1\" }\r\n      ],\r\n      // github style code blocks (with backticks but no language)\r\n      [/^\\s*```\\s*$/, { token: \"string\", next: \"@codeblock\" }],\r\n      // markup within lines\r\n      { include: \"@linecontent\" }\r\n    ],\r\n    table_header: [\r\n      { include: \"@table_common\" },\r\n      [/[^\\|]+/, \"keyword.table.header\"]\r\n      // table header\r\n    ],\r\n    table_body: [{ include: \"@table_common\" }, { include: \"@linecontent\" }],\r\n    table_common: [\r\n      [/\\s*[\\-:]+\\s*/, { token: \"keyword\", switchTo: \"table_body\" }],\r\n      // header-divider\r\n      [/^\\s*\\|/, \"keyword.table.left\"],\r\n      // opening |\r\n      [/^\\s*[^\\|]/, \"@rematch\", \"@pop\"],\r\n      // exiting\r\n      [/^\\s*$/, \"@rematch\", \"@pop\"],\r\n      // exiting\r\n      [\r\n        /\\|/,\r\n        {\r\n          cases: {\r\n            \"@eos\": \"keyword.table.right\",\r\n            // closing |\r\n            \"@default\": \"keyword.table.middle\"\r\n            // inner |\r\n          }\r\n        }\r\n      ]\r\n    ],\r\n    codeblock: [\r\n      [/^\\s*~~~\\s*$/, { token: \"string\", next: \"@pop\" }],\r\n      [/^\\s*```\\s*$/, { token: \"string\", next: \"@pop\" }],\r\n      [/.*$/, \"variable.source\"]\r\n    ],\r\n    // github style code blocks\r\n    codeblockgh: [\r\n      [/```\\s*$/, { token: \"string\", next: \"@pop\", nextEmbedded: \"@pop\" }],\r\n      [/[^`]+/, \"variable.source\"]\r\n    ],\r\n    linecontent: [\r\n      // escapes\r\n      [/&\\w+;/, \"string.escape\"],\r\n      [/@escapes/, \"escape\"],\r\n      // various markup\r\n      [/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, \"strong\"],\r\n      [/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, \"strong\"],\r\n      [/\\b_[^_]+_\\b/, \"emphasis\"],\r\n      [/\\*([^\\\\*]|@escapes)+\\*/, \"emphasis\"],\r\n      [/`([^\\\\`]|@escapes)+`/, \"variable\"],\r\n      // links\r\n      [/\\{+[^}]+\\}+/, \"string.target\"],\r\n      [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, [\"string.link\", \"\", \"string.link\"]],\r\n      [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, \"string.link\"],\r\n      // or html\r\n      { include: \"html\" }\r\n    ],\r\n    // Note: it is tempting to rather switch to the real HTML mode instead of building our own here\r\n    // but currently there is a limitation in Monarch that prevents us from doing it: The opening\r\n    // '<' would start the HTML mode, however there is no way to jump 1 character back to let the\r\n    // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\r\n    // we cannot correctly tokenize it in that mode yet.\r\n    html: [\r\n      // html tags\r\n      [/<(\\w+)\\/>/, \"tag\"],\r\n      [\r\n        /<(\\w+)(\\-|\\w)*/,\r\n        {\r\n          cases: {\r\n            \"@empty\": { token: \"tag\", next: \"@tag.$1\" },\r\n            \"@default\": { token: \"tag\", next: \"@tag.$1\" }\r\n          }\r\n        }\r\n      ],\r\n      [/<\\/(\\w+)(\\-|\\w)*\\s*>/, { token: \"tag\" }],\r\n      [/<!--/, \"comment\", \"@comment\"]\r\n    ],\r\n    comment: [\r\n      [/[^<\\-]+/, \"comment.content\"],\r\n      [/-->/, \"comment\", \"@pop\"],\r\n      [/<!--/, \"comment.content.invalid\"],\r\n      [/[<\\-]/, \"comment.content\"]\r\n    ],\r\n    // Almost full HTML tag matching, complete with embedded scripts & styles\r\n    tag: [\r\n      [/[ \\t\\r\\n]+/, \"white\"],\r\n      [\r\n        /(type)(\\s*=\\s*)(\")([^\"]+)(\")/,\r\n        [\r\n          \"attribute.name.html\",\r\n          \"delimiter.html\",\r\n          \"string.html\",\r\n          { token: \"string.html\", switchTo: \"@tag.$S2.$4\" },\r\n          \"string.html\"\r\n        ]\r\n      ],\r\n      [\r\n        /(type)(\\s*=\\s*)(')([^']+)(')/,\r\n        [\r\n          \"attribute.name.html\",\r\n          \"delimiter.html\",\r\n          \"string.html\",\r\n          { token: \"string.html\", switchTo: \"@tag.$S2.$4\" },\r\n          \"string.html\"\r\n        ]\r\n      ],\r\n      [/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, [\"attribute.name.html\", \"delimiter.html\", \"string.html\"]],\r\n      [/\\w+/, \"attribute.name.html\"],\r\n      [/\\/>/, \"tag\", \"@pop\"],\r\n      [\r\n        />/,\r\n        {\r\n          cases: {\r\n            \"$S2==style\": {\r\n              token: \"tag\",\r\n              switchTo: \"embeddedStyle\",\r\n              nextEmbedded: \"text/css\"\r\n            },\r\n            \"$S2==script\": {\r\n              cases: {\r\n                $S3: {\r\n                  token: \"tag\",\r\n                  switchTo: \"embeddedScript\",\r\n                  nextEmbedded: \"$S3\"\r\n                },\r\n                \"@default\": {\r\n                  token: \"tag\",\r\n                  switchTo: \"embeddedScript\",\r\n                  nextEmbedded: \"text/javascript\"\r\n                }\r\n              }\r\n            },\r\n            \"@default\": { token: \"tag\", next: \"@pop\" }\r\n          }\r\n        }\r\n      ]\r\n    ],\r\n    embeddedStyle: [\r\n      [/[^<]+/, \"\"],\r\n      [/<\\/style\\s*>/, { token: \"@rematch\", next: \"@pop\", nextEmbedded: \"@pop\" }],\r\n      [/</, \"\"]\r\n    ],\r\n    embeddedScript: [\r\n      [/[^<]+/, \"\"],\r\n      [/<\\/script\\s*>/, { token: \"@rematch\", next: \"@pop\", nextEmbedded: \"@pop\" }],\r\n      [/</, \"\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
