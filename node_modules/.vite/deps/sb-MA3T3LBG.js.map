{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/basic-languages/sb/sb.js"],
  "sourcesContent": ["/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n\r\n// src/basic-languages/sb/sb.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"'\"\r\n  },\r\n  brackets: [\r\n    [\"(\", \")\"],\r\n    [\"[\", \"]\"],\r\n    [\"If\", \"EndIf\"],\r\n    [\"While\", \"EndWhile\"],\r\n    [\"For\", \"EndFor\"],\r\n    [\"Sub\", \"EndSub\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\r\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] },\r\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] }\r\n  ]\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".sb\",\r\n  ignoreCase: true,\r\n  brackets: [\r\n    { token: \"delimiter.array\", open: \"[\", close: \"]\" },\r\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\r\n    // Special bracket statement pairs\r\n    { token: \"keyword.tag-if\", open: \"If\", close: \"EndIf\" },\r\n    { token: \"keyword.tag-while\", open: \"While\", close: \"EndWhile\" },\r\n    { token: \"keyword.tag-for\", open: \"For\", close: \"EndFor\" },\r\n    { token: \"keyword.tag-sub\", open: \"Sub\", close: \"EndSub\" }\r\n  ],\r\n  keywords: [\r\n    \"Else\",\r\n    \"ElseIf\",\r\n    \"EndFor\",\r\n    \"EndIf\",\r\n    \"EndSub\",\r\n    \"EndWhile\",\r\n    \"For\",\r\n    \"Goto\",\r\n    \"If\",\r\n    \"Step\",\r\n    \"Sub\",\r\n    \"Then\",\r\n    \"To\",\r\n    \"While\"\r\n  ],\r\n  tagwords: [\"If\", \"Sub\", \"While\", \"For\"],\r\n  operators: [\">\", \"<\", \"<>\", \"<=\", \">=\", \"And\", \"Or\", \"+\", \"-\", \"*\", \"/\", \"=\"],\r\n  // we include these common regular expressions\r\n  identifier: /[a-zA-Z_][\\w]*/,\r\n  symbols: /[=><:+\\-*\\/%\\.,]+/,\r\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n  // The main tokenizer for our languages\r\n  tokenizer: {\r\n    root: [\r\n      // whitespace\r\n      { include: \"@whitespace\" },\r\n      // classes\r\n      [/(@identifier)(?=[.])/, \"type\"],\r\n      // identifiers, tagwords, and keywords\r\n      [\r\n        /@identifier/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": { token: \"keyword.$0\" },\r\n            \"@operators\": \"operator\",\r\n            \"@default\": \"variable.name\"\r\n          }\r\n        }\r\n      ],\r\n      // methods, properties, and events\r\n      [\r\n        /([.])(@identifier)/,\r\n        {\r\n          cases: {\r\n            $2: [\"delimiter\", \"type.member\"],\r\n            \"@default\": \"\"\r\n          }\r\n        }\r\n      ],\r\n      // numbers\r\n      [/\\d*\\.\\d+/, \"number.float\"],\r\n      [/\\d+/, \"number\"],\r\n      // delimiters and operators\r\n      [/[()\\[\\]]/, \"@brackets\"],\r\n      [\r\n        /@symbols/,\r\n        {\r\n          cases: {\r\n            \"@operators\": \"operator\",\r\n            \"@default\": \"delimiter\"\r\n          }\r\n        }\r\n      ],\r\n      // strings\r\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\r\n      // non-teminated string\r\n      [/\"/, \"string\", \"@string\"]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"\"],\r\n      [/(\\').*$/, \"comment\"]\r\n    ],\r\n    string: [\r\n      [/[^\\\\\"]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/\"C?/, \"string\", \"@pop\"]\r\n    ]\r\n  }\r\n};\r\nexport {\r\n  conf,\r\n  language\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
